{"version":3,"sources":["Utils.js","components/Navigation/MenuItems/MenuItems.js","components/Navigation/Drawer/Drawer.js","dataServices/barChart.js","dataServices/lineChart.js","dataServices/pieChart.js","dataServices/polarChart.js","dataServices/radarChart.js","dataServices/stackedChart.js","components/Animations/PaperTransition.js","components/ErrorComp/ErrorComp.js","components/Charts/LineChart/LineChart.js","components/Charts/BarChart/BarChart.js","components/Charts/PieChart/PieChart.js","components/Charts/PolarChart/PolarChart.js","components/Charts/RadarChart/RadarChart.js","components/Charts/StackedChart/StackedChart.js","components/Layout/ChartLayout/ChartLayout.js","App.js","reportWebVitals.js","index.js"],"names":["monthsArray","randomNumber","min","max","Math","random","module","exports","CHART_COLORS","red","blue","green","yellow","months","data","slice","count","numbers","num_arr","push","console","log","length","menuItems","title","icon","MenuItems","props","List","map","menu","ListItem","button","ListItemIcon","ListItemText","primary","drawerWidth","useStyles","makeStyles","theme","root","display","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","boxSizing","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","justifyContent","padding","mixins","content","flexGrow","MiniDrawer","classes","useTheme","React","open","setOpen","className","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Typography","variant","noWrap","component","Drawer","paper","direction","Divider","NUMBER_CFG","barChartService","getData","a","labels","Utils","datasets","label","backgroundColor","lineChartService","fill","borderColor","tension","pieChartService","hoverOffset","polarChartService","radarChartService","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","stackedChartService","customTheme","createMuiTheme","palette","main","deepPurple","Styledvatar","styled","Paper","standard","PaperTransition","NoSsr","children","ErrorComp","Chart","pluginService","register","afterDraw","chart","ctx","height","clear","save","textAlign","textBaseline","font","fillText","restore","LineChart","useEffect","errorHandler","options","responsive","maintainAspectRatio","BarChart","minHieght","plugins","text","scales","y","stacked","tooltip","mode","interaction","axis","intersect","x","ChartLayout","useState","barChartData","setBarChartData","lineChartData","setLineChartData","pieChartData","setPieChartData","polarChartData","setPolarChartData","radarChartData","setRadarChartData","stackedChartData","setStackedChartData","getChartDataFromService","then","catch","err","PieChart","StackedChart","PolarChart","RadarChart","App","dasboard","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StyledEngineProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.5101aad5.chunk.js","sourcesContent":["let monthsArray = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\nfunction randomNumber(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\n// This module is for some generic used function by charts to help populating data and Legends.\r\n\r\nmodule.exports = {\r\n    CHART_COLORS: {\r\n        red: \"#ff6384\",\r\n        blue: \"#36a2eb\",\r\n        green: \"#4bc0c0\",\r\n        yellow: \"#ffcd56\"\r\n    },\r\n    months: (data) => {\r\n        return monthsArray.slice(0, data.count);\r\n    },\r\n    numbers: ({ count, max, min }) => {\r\n        let num_arr = [];\r\n        while (count != 0) {\r\n            num_arr.push(randomNumber(min, max));\r\n            count--;\r\n        }\r\n        console.log(num_arr.length);\r\n        return num_arr;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Dashboard from '@material-ui/icons/Dashboard';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport BarChart from '@material-ui/icons/BarChart';\r\nimport Settings from '@material-ui/icons/Settings';\r\nimport Message from '@material-ui/icons/Message';\r\nimport List from '@material-ui/core/List';\r\n\r\n// An Object to supply menuItems to Drawer Component\r\n// You can add title and icon from here \r\nconst menuItems = [\r\n    {\r\n        title: \"Dashboard\",\r\n        icon: <Dashboard />\r\n    },\r\n    {\r\n        title: \"Charts\",\r\n        icon: <BarChart />\r\n    },\r\n    {\r\n        title: \"Forms\",\r\n        icon: <Message />\r\n    },\r\n    {\r\n        title: \"Emails\",\r\n        icon: <MailIcon />\r\n    },\r\n    {\r\n        title: \"Settings\",\r\n        icon: <Settings />\r\n    }\r\n]\r\n\r\n// In props we can pass the onClick handler from parent component to load respective view component on click\r\nconst MenuItems = (props) => {\r\n    return (\r\n        <div>\r\n            <List>\r\n                {menuItems.map((menu) => (\r\n                    <ListItem button key={menu.title}>\r\n                        <ListItemIcon>{menu.icon}</ListItemIcon>\r\n                        <ListItemText primary={menu.title} />\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuItems;","import * as React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport MenuItems from '../MenuItems/MenuItems';\r\n\r\n\r\n// This is drwer Component from Material UI\r\n// This component import MenuItems to show menu\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: 'nowrap',\r\n        boxSizing: 'border-box',\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: 'hidden',\r\n        width: `calc(${theme.spacing(7)} + 1px)`,\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `calc(${theme.spacing(9)} + 1px)`,\r\n        },\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        width: '80%'\r\n    },\r\n}));\r\n\r\n// This component recieves Title and Content in props\r\n\r\nexport default function MiniDrawer(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, {\r\n                            [classes.hide]: open,\r\n                        })}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap component=\"div\">\r\n                        {props.title}\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                className={clsx(classes.drawer, {\r\n                    [classes.drawerOpen]: open,\r\n                    [classes.drawerClose]: !open,\r\n                })}\r\n                classes={{\r\n                    paper: clsx({\r\n                        [classes.drawerOpen]: open,\r\n                        [classes.drawerClose]: !open,\r\n                    }),\r\n                }}\r\n            >\r\n                <div className={classes.toolbar}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <MenuItems />\r\n                <Divider />\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n                {props.content}\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n","import Utils from '../Utils';\r\n\r\nconst DATA_COUNT = 7;\r\nconst NUMBER_CFG = { count: DATA_COUNT, min: 0, max: 100 };\r\n\r\nconst barChartService = {\r\n    getData: async () => {\r\n        // This is an async function, \r\n        // you can write an API call with await here to get data from service\r\n\r\n        // For testing on error in consuming data API we can throw an error from here.\r\n        // throw new Error();\r\n        return {\r\n            labels: Utils.months({ count: 7 }),\r\n            datasets: [\r\n                {\r\n                    label: 'Dataset 1',\r\n                    data: Utils.numbers(NUMBER_CFG),\r\n                    backgroundColor: Utils.CHART_COLORS.red,\r\n                },\r\n                {\r\n                    label: 'Dataset 2',\r\n                    data: Utils.numbers(NUMBER_CFG),\r\n                    backgroundColor: Utils.CHART_COLORS.blue,\r\n                },\r\n                {\r\n                    label: 'Dataset 3',\r\n                    data: Utils.numbers(NUMBER_CFG),\r\n                    backgroundColor: Utils.CHART_COLORS.green,\r\n                },\r\n            ]\r\n        };\r\n    }\r\n}\r\n\r\nexport default barChartService;","import Utils from '../Utils';\r\n\r\nconst DATA_COUNT = 7;\r\nconst NUMBER_CFG = { count: DATA_COUNT, min: 0, max: 100 };\r\n\r\nconst lineChartService = {\r\n    getData: async () => {\r\n        // This is an async function, \r\n        // you can write an API call with await here to get data from service\r\n        // For testing on error in consuming data API we can throw an error from here.\r\n        // throw new Error();\r\n        return {\r\n            labels: Utils.months({ count: 7 }),\r\n            datasets: [{\r\n                label: 'My First Dataset',\r\n                data: Utils.numbers(NUMBER_CFG),\r\n                fill: false,\r\n                borderColor: Utils.CHART_COLORS.red,\r\n                tension: 0.1\r\n            },\r\n            {\r\n                label: 'Dataset 2',\r\n                data: Utils.numbers(NUMBER_CFG),\r\n                fill: false,\r\n                borderColor: Utils.CHART_COLORS.blue,\r\n                tension: 0.1\r\n            }\r\n            ]\r\n        };\r\n    }\r\n}\r\n\r\nexport default lineChartService;","import Utils from '../Utils';\r\n\r\nconst DATA_COUNT = 5;\r\nconst NUMBER_CFG = { count: DATA_COUNT, min: 0, max: 100 };\r\n\r\nconst pieChartService = {\r\n    getData: async () => {\r\n        // This is an async function, \r\n        // you can write an API call with await here to get data from service\r\n        // For testing on error in consuming data API we can throw an error from here.\r\n        // throw new Error();\r\n        return {\r\n            labels: [\r\n                'Red',\r\n                'Green',\r\n                'Yellow',\r\n                'Grey',\r\n                'Blue'\r\n            ],\r\n            datasets: [{\r\n                label: 'My First Dataset',\r\n                data: Utils.numbers(NUMBER_CFG),\r\n                backgroundColor: [\r\n                    'rgb(255, 99, 132)',\r\n                    'rgb(75, 192, 192)',\r\n                    'rgb(255, 205, 86)',\r\n                    'rgb(201, 203, 207)',\r\n                    'rgb(54, 162, 235)'\r\n                ],\r\n                hoverOffset: 4\r\n            }]\r\n        };\r\n    }\r\n}\r\n\r\nexport default pieChartService;","import Utils from '../Utils';\r\n\r\nconst DATA_COUNT = 5;\r\nconst NUMBER_CFG = { count: DATA_COUNT, min: 0, max: 100 };\r\n\r\nconst polarChartService = {\r\n    getData: async () => {\r\n        // This is an async function, \r\n        // you can write an API call with await here to get data from service\r\n        // For testing on error in consuming data API we can throw an error from here.\r\n        // throw new Error();\r\n        return {\r\n            labels: [\r\n                'Red',\r\n                'Green',\r\n                'Yellow',\r\n                'Grey',\r\n                'Blue'\r\n            ],\r\n            datasets: [{\r\n                label: 'My First Dataset',\r\n                data: Utils.numbers(NUMBER_CFG),\r\n                backgroundColor: [\r\n                    'rgb(255, 99, 132)',\r\n                    'rgb(75, 192, 192)',\r\n                    'rgb(255, 205, 86)',\r\n                    'rgb(201, 203, 207)',\r\n                    'rgb(54, 162, 235)'\r\n                ]\r\n            }]\r\n        };\r\n    }\r\n}\r\n\r\nexport default polarChartService;","import Utils from '../Utils';\r\n\r\nconst DATA_COUNT = 7;\r\nconst NUMBER_CFG = { count: DATA_COUNT, min: 0, max: 100 };\r\n\r\nconst radarChartService = {\r\n    getData: async () => {\r\n        // This is an async function, \r\n        // you can write an API call with await here to get data from service\r\n        // For testing on error in consuming data API we can throw an error from here.\r\n        // throw new Error();\r\n        return {\r\n            labels: [\r\n                'Eating',\r\n                'Drinking',\r\n                'Sleeping',\r\n                'Designing',\r\n                'Coding',\r\n                'Cycling',\r\n                'Running'\r\n            ],\r\n            datasets: [{\r\n                label: 'My First Dataset',\r\n                data: Utils.numbers(NUMBER_CFG),\r\n                fill: true,\r\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n                borderColor: 'rgb(255, 99, 132)',\r\n                pointBackgroundColor: 'rgb(255, 99, 132)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgb(255, 99, 132)'\r\n            }, {\r\n                label: 'My Second Dataset',\r\n                data: Utils.numbers(NUMBER_CFG),\r\n                fill: true,\r\n                backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n                borderColor: 'rgb(54, 162, 235)',\r\n                pointBackgroundColor: 'rgb(54, 162, 235)',\r\n                pointBorderColor: '#fff',\r\n                pointHoverBackgroundColor: '#fff',\r\n                pointHoverBorderColor: 'rgb(54, 162, 235)'\r\n            }]\r\n        };\r\n    }\r\n}\r\n\r\nexport default radarChartService;","import Utils from '../Utils';\r\n\r\nconst DATA_COUNT = 7;\r\nconst NUMBER_CFG = { count: DATA_COUNT, min: 0, max: 100 };\r\n\r\nconst stackedChartService = {\r\n    getData: async () => {\r\n        // This is an async function, \r\n        // you can write an API call with await here to get data from service\r\n        // For testing on error in consuming data API we can throw an error from here.\r\n        // throw new Error();\r\n        return {\r\n            labels: Utils.months({ count: 7 }),\r\n            datasets: [\r\n                {\r\n                    label: 'My First dataset',\r\n                    data: Utils.numbers(NUMBER_CFG),\r\n                    borderColor: Utils.CHART_COLORS.red,\r\n                    backgroundColor: Utils.CHART_COLORS.red,\r\n                    fill: true\r\n                },\r\n                {\r\n                    label: 'My Second dataset',\r\n                    data: Utils.numbers(NUMBER_CFG),\r\n                    borderColor: Utils.CHART_COLORS.blue,\r\n                    backgroundColor: Utils.CHART_COLORS.blue,\r\n                    fill: true\r\n                },\r\n                {\r\n                    label: 'My Third dataset',\r\n                    data: Utils.numbers(NUMBER_CFG),\r\n                    borderColor: Utils.CHART_COLORS.green,\r\n                    backgroundColor: Utils.CHART_COLORS.green,\r\n                    fill: true\r\n                },\r\n                {\r\n                    label: 'My Fourth dataset',\r\n                    data: Utils.numbers(NUMBER_CFG),\r\n                    borderColor: Utils.CHART_COLORS.yellow,\r\n                    backgroundColor: Utils.CHART_COLORS.yellow,\r\n                    fill: true\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n\r\nexport default stackedChartService;","import * as React from 'react';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport NoSsr from '@material-ui/core/NoSsr';\r\nimport {\r\n    createMuiTheme,\r\n    ThemeProvider as MuiThemeProvider,\r\n} from '@material-ui/core/styles';\r\nimport { deepPurple } from '@material-ui/core/colors';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst customTheme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: deepPurple[500],\r\n        },\r\n    },\r\n});\r\n\r\n// background-color: ${theme.palette.primary.main};\r\n// background-color: ${theme.palette.secondary.main};\r\n\r\n// We are explicity doing this for Paper component on Material UI \r\n// We can also optimize to use for any component passed by writing a Higher Order Component \r\nconst Styledvatar = styled(Paper)`\r\n  ${({ theme }) => `\r\n  cursor: pointer;\r\n  padding: 15px;\r\n  background-color: #fff;\r\n  transition: ${theme.transitions.create(['background-color', 'transform'], {\r\n    duration: theme.transitions.duration.standard,\r\n})};\r\n  &:hover {\r\n    background-color: #fff;\r\n    box-shadow: 0 8px 6px -6px black;;\r\n    transform: scale(1.03);\r\n  }\r\n  `}\r\n`;\r\n\r\n// This Component is to add Animation paper on which Chart will be drawn \r\n// We can use this for any other component as well.\r\n\r\nfunction PaperTransition(props) {\r\n    return (\r\n        <NoSsr>\r\n            <MuiThemeProvider theme={customTheme}>\r\n                <ThemeProvider theme={customTheme}>\r\n                    <Styledvatar>{props.children}</Styledvatar>\r\n                </ThemeProvider>\r\n            </MuiThemeProvider>\r\n        </NoSsr>\r\n    );\r\n}\r\n\r\n\r\nexport default PaperTransition;","import { Chart } from 'react-chartjs-2';\r\nconst ErrorComp = () => {\r\n    // This function is to set error text on no data\r\n    Chart.pluginService.register({\r\n        afterDraw: function (chart) {\r\n            // Plugin code.\r\n            if (chart.data.datasets.length === 0) {\r\n                // No data is present\r\n                var ctx = chart.chart.ctx;\r\n                var width = chart.chart.width;\r\n                var height = chart.chart.height\r\n                chart.clear();\r\n\r\n                ctx.save();\r\n                ctx.textAlign = 'center';\r\n                ctx.textBaseline = 'middle';\r\n                ctx.font = \"16px normal 'Helvetica Nueue'\";\r\n                ctx.fillText('No data to display', width / 2, height / 2);\r\n                ctx.restore();\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport default ErrorComp;","import React, { useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport Transitions from '../../Animations/PaperTransition';\r\nimport errorHandler from '../../ErrorComp/ErrorComp'\r\n\r\n\r\nconst LineChart = (props) => {\r\n\r\n    // If Data set is empty then this effect with Set the proper message on Card\r\n    useEffect(() => {\r\n        errorHandler();\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <Transitions>\r\n            <Line data={props.data} height={250} options={{\r\n                responsive: true,\r\n                maintainAspectRatio: false\r\n            }} />\r\n        </Transitions>\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default LineChart;","import { Bar } from 'react-chartjs-2';\r\nimport Transitions from '../../Animations/PaperTransition';\r\nimport errorHandler from '../../ErrorComp/ErrorComp'\r\nimport React, { useEffect } from 'react';\r\n\r\n\r\nconst BarChart = (props) => {\r\n\r\n    // If Data set is empty then this effect with Set the proper message on Card\r\n    useEffect(() => {\r\n        errorHandler();\r\n    }, [])\r\n\r\n    // This chart is getting data from porps    \r\n    return (\r\n        <Transitions>\r\n            <Bar data={props.data} height={250} options={{\r\n                responsive: true,\r\n                maintainAspectRatio: false\r\n            }} />\r\n        </Transitions>\r\n    )\r\n}\r\n\r\n\r\nexport default BarChart;","import { Pie } from 'react-chartjs-2';\r\nimport Transitions from '../../Animations/PaperTransition';\r\nimport errorHandler from '../../ErrorComp/ErrorComp';\r\nimport React, { useEffect } from 'react'\r\n\r\n\r\nconst LineChart = (props) => {\r\n    useEffect(() => {\r\n        errorHandler();\r\n    }, [])\r\n\r\n    return (\r\n        <Transitions>\r\n            <Pie data={props.data} options={{\r\n                responsive: true,\r\n                maintainAspectRatio: false\r\n            }} />\r\n        </Transitions>\r\n    )\r\n}\r\n\r\n\r\nexport default LineChart;","import { Polar } from 'react-chartjs-2';\r\nimport Transitions from '../../Animations/PaperTransition';\r\nimport errorHandler from '../../ErrorComp/ErrorComp';\r\nimport React, { useEffect } from 'react'\r\n\r\n\r\nconst LineChart = (props) => {\r\n\r\n    useEffect(() => {\r\n        errorHandler();\r\n    }, [])\r\n\r\n    return (\r\n        <Transitions>\r\n            <Polar data={props.data} height={350} options={{\r\n                responsive: true,\r\n                maintainAspectRatio: false\r\n            }} />\r\n        </Transitions>\r\n    )\r\n}\r\n\r\n\r\nexport default LineChart;","import { Radar } from 'react-chartjs-2';\r\nimport Transitions from '../../Animations/PaperTransition';\r\nimport errorHandler from '../../ErrorComp/ErrorComp';\r\nimport React, { useEffect } from 'react'\r\n\r\n\r\nconst LineChart = (props) => {\r\n\r\n    useEffect(() => {\r\n        errorHandler();\r\n    }, [])\r\n\r\n    return (\r\n        <Transitions>\r\n            <Radar data={props.data} height={350} options={{\r\n                responsive: true,\r\n                maintainAspectRatio: false\r\n            }} />\r\n        </Transitions>\r\n    )\r\n}\r\n\r\n\r\nexport default LineChart;","import React, { useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport Transitions from '../../Animations/PaperTransition';\r\nimport errorHandler from '../../ErrorComp/ErrorComp';\r\n\r\nconst LineChart = (props) => {\r\n\r\n    useEffect(() => {\r\n        errorHandler();\r\n    }, [])\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        minHieght: 100,\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: (ctx) => 'Chart.js Line Chart - stacked=' + ctx.chart.options.scales.y.stacked\r\n            },\r\n            tooltip: {\r\n                mode: 'index'\r\n            },\r\n        },\r\n        interaction: {\r\n            mode: 'nearest',\r\n            axis: 'x',\r\n            intersect: false\r\n        },\r\n        scales: {\r\n            x: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Month'\r\n                }\r\n            },\r\n            y: {\r\n                stacked: true,\r\n                title: {\r\n                    display: true,\r\n                    text: 'Value'\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Transitions>\r\n            <Line data={props.data} height={250} options={options} />\r\n        </Transitions>\r\n    )\r\n}\r\n\r\n\r\nexport default LineChart;","import React, { useState, useEffect } from 'react'\r\nimport './ChartLayout.css';\r\n// All data service imports \r\nimport barChartService from '../../../dataServices/barChart';\r\nimport lineChartService from '../../../dataServices/lineChart';\r\nimport pieChartService from '../../../dataServices/pieChart';\r\nimport polarChartService from '../../../dataServices/polarChart';\r\nimport radarChartService from '../../../dataServices/radarChart';\r\nimport stackedChartService from '../../../dataServices/stackedChart';\r\n// All view component imports\r\nimport LineChart from '../../Charts/LineChart/LineChart';\r\nimport BarChart from '../../Charts/BarChart/BarChart';\r\nimport PieChart from '../../Charts/PieChart/PieChart';\r\nimport PolarChart from '../../Charts/PolarChart/PolarChart';\r\nimport RadarChart from '../../Charts/RadarChart/RadarChart';\r\nimport StackedChart from '../../Charts/StackedChart/StackedChart';\r\n\r\n// This is the main component to get data from service and populate them in view\r\n\r\nconst ChartLayout = () => {\r\n    // States for all Chart components initalize with empty and error false\r\n\r\n    const [barChartData, setBarChartData] = useState([]);\r\n    const [lineChartData, setLineChartData] = useState([]);\r\n    const [pieChartData, setPieChartData] = useState([]);\r\n    const [polarChartData, setPolarChartData] = useState([]);\r\n    const [radarChartData, setRadarChartData] = useState([]);\r\n    const [stackedChartData, setStackedChartData] = useState([]);\r\n\r\n    // The side effect of this component to call all the data service API and set the value in respective State\r\n    useEffect(() => {\r\n        getChartDataFromService();\r\n    }, [])\r\n\r\n    // This function is for calling data service API and error handling \r\n    // Since All charts are independent so I have called the asynchronus\r\n    // All service have a getData function in it. \r\n    // On Error data is set to empty and Error is handle on Empty data set by the component itself \r\n    const getChartDataFromService = () => {\r\n        barChartService.getData()\r\n            .then((data) => {\r\n                setBarChartData(data);\r\n            }).catch((err) => {\r\n                setBarChartData([]);\r\n            })\r\n        lineChartService.getData()\r\n            .then((data) => {\r\n                setLineChartData(data);\r\n            }).catch((err) => {\r\n                setLineChartData([]);\r\n            })\r\n        pieChartService.getData()\r\n            .then((data) => {\r\n                setPieChartData(data);\r\n            }).catch((err) => {\r\n                setPieChartData([]);\r\n            })\r\n        polarChartService.getData()\r\n            .then((data) => {\r\n                setPolarChartData(data);\r\n            }).catch((err) => {\r\n                setPolarChartData([]);\r\n            })\r\n        radarChartService.getData()\r\n            .then((data) => {\r\n                setRadarChartData(data);\r\n            }).catch((err) => {\r\n                setRadarChartData([]);\r\n            })\r\n        stackedChartService.getData()\r\n            .then((data) => {\r\n                setStackedChartData(data);\r\n            }).catch((err) => {\r\n                setStackedChartData([]);\r\n            })\r\n    }\r\n\r\n    // This has all the magic !!\r\n    // Layout for all the chart components \r\n    // I have used grid view over here with display flex.\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"grid-1\">\r\n                <div className=\"grid-item grid-item-1\"><PieChart data={pieChartData} /></div>\r\n                <div className=\"grid-item grid-item-2\"><PieChart data={pieChartData} /></div>\r\n                <div className=\"grid-item grid-item-3\"><PieChart data={pieChartData} /></div>\r\n                <div className=\"grid-item grid-item-4\"><StackedChart data={stackedChartData} /></div>\r\n                <div className=\"grid-item-5\">\r\n                    <div className=\"grid-item-5-1\">\r\n                        <BarChart data={barChartData} />\r\n                    </div>\r\n                    <div className=\"grid-item-5-2\">\r\n                        <LineChart data={lineChartData} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"grid-2\">\r\n                <div className=\"grid-item grid-item-2-1\">\r\n                    <PolarChart data={polarChartData} />\r\n                </div>\r\n                <div className=\"grid-item grid-item-2-2\">\r\n                    <RadarChart data={radarChartData} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChartLayout;\r\n","import './App.css';\nimport Drawer from './components/Navigation/Drawer/Drawer';\nimport ChartLayout from './components/Layout/ChartLayout/ChartLayout';\n\nconst App = () => {\n\n  // This components include drawer and main chart layout \n  // If someone wish to routes if future, it can be added here\n  // for dashboard routes we can load the ChartLayout component\n\n  let dasboard = <ChartLayout />\n  return (\n    <div className=\"App\">\n      <Drawer title={\"Dashboard\"} content={dasboard} />\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport StyledEngineProvider from '@material-ui/core/StyledEngineProvider';\n\nReactDOM.render(\n  <StyledEngineProvider injectFirst>\n    <App />\n  </StyledEngineProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}